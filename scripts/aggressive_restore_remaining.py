#!/usr/bin/env python3
"""
–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∫–æ–Ω–æ–∫
"""

import os
import requests
import json
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BACKUP_DIR = Path("api/static/icons")

def download_image(url: str, path: Path) -> bool:
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    try:
        if not url or not url.startswith('http'):
            return False
            
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            with open(path, 'wb') as f:
                f.write(response.content)
            print(f"‚úì Downloaded: {path.name}")
            return True
    except Exception as e:
        print(f"‚úó Failed {path.name}: {e}")
    return False

def search_coingecko_aggressive(query: str):
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –≤ CoinGecko"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
        search_variants = [
            query,
            query.lower(),
            query.upper(),
            query.replace("-", " "),
            query.replace(" ", "-"),
            query.replace("_", " "),
            query.replace(" ", "_"),
            query.replace("v2", "").replace("v3", "").replace("v4", "").strip(),
            query.replace("-v2", "").replace("-v3", "").replace("-v4", "").strip()
        ]
        
        for variant in search_variants:
            if not variant:
                continue
                
            response = requests.get("https://api.coingecko.com/api/v3/search", params={
                "query": variant
            })
            
            if response.status_code == 200:
                data = response.json()
                if data.get("coins"):
                    for coin in data["coins"]:
                        coin_name = coin.get("name", "").lower()
                        coin_symbol = coin.get("symbol", "").upper()
                        variant_lower = variant.lower()
                        
                        # –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                        if (variant_lower in coin_name or 
                            coin_name in variant_lower or
                            coin_symbol == variant.upper() or
                            abs(len(variant_lower) - len(coin_name)) <= 3):
                            return coin.get("large", "")
        
        return ""
    except Exception as e:
        print(f"Error in aggressive search for {query}: {e}")
    return ""

def restore_iota_token():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω IOTA"""
    print("ü™ô Restoring IOTA token...")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ IOTA
    iota_variants = [
        "iota", "miota", "iota-tangle", "iota tangle", "IOTA", "MIOTA"
    ]
    
    for variant in iota_variants:
        print(f"üîç Trying variant: {variant}")
        icon_url = search_coingecko_aggressive(variant)
        
        if icon_url:
            backup_path = BACKUP_DIR / "tokens" / "IOTA.png"
            if download_image(icon_url, backup_path):
                print(f"‚úÖ Restored IOTA token")
                return True
            else:
                print(f"‚ùå Failed to download IOTA")
    
    print(f"‚ùå IOTA token not found")
    return False

def restore_missing_protocols_aggressive():
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
    print("üèõÔ∏è Aggressive restoration of missing protocols...")
    
    # –°–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    missing_protocols = [
        "3jane-options", "aave-v3", "aerodrome-v1", "alien-base-v2", "alien-base-v3",
        "anzen-v2", "apeswap-lending", "aptin-finance-v2", "arcadia-v2", "arrakis-v1",
        "arrakis-v2", "astar-network", "bancor-v3", "compound-v2", "curve-v2",
        "dydx-v4", "euler-v2", "gmx-v2", "kyber-network", "lido-v2",
        "makerdao", "pancakeswap-v3", "sushiswap-v3", "uniswap-v3", "yearn-finance-v2"
    ]
    
    restored_count = 0
    
    for protocol in missing_protocols:
        print(f"üîç Aggressive search for {protocol}...")
        
        # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        icon_url = search_coingecko_aggressive(protocol)
        
        if icon_url:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
            import re
            file_name = re.sub(r'[^A-Z0-9]', '', protocol.upper())
            backup_path = BACKUP_DIR / "protocols" / f"{file_name}.png"
            
            if download_image(icon_url, backup_path):
                restored_count += 1
                print(f"‚úÖ Restored {protocol}")
            else:
                print(f"‚ùå Failed to download {protocol}")
        else:
            print(f"‚ùå Icon not found for {protocol}")
    
    print(f"üìä Restored {restored_count} protocol icons")
    return restored_count

def use_cmc_api_for_missing():
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CoinMarketCap API –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∫–æ–Ω–æ–∫"""
    print("üí∞ Using CoinMarketCap API for missing icons...")
    
    # API –∫–ª—é—á CoinMarketCap
    cmc_api_key = "4dc743a6ee7f4294a2d34f2969e37014"
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_items = [
        {"name": "IOTA", "type": "token"},
        {"name": "Aave", "type": "protocol"},
        {"name": "Compound", "type": "protocol"},
        {"name": "Curve", "type": "protocol"},
        {"name": "Uniswap", "type": "protocol"},
        {"name": "SushiSwap", "type": "protocol"},
        {"name": "PancakeSwap", "type": "protocol"},
        {"name": "Yearn Finance", "type": "protocol"},
        {"name": "MakerDAO", "type": "protocol"},
        {"name": "Kyber Network", "type": "protocol"}
    ]
    
    restored_count = 0
    
    for item in search_items:
        print(f"üîç CMC search for {item['name']}...")
        
        try:
            headers = {
                'X-CMC_PRO_API_KEY': cmc_api_key,
                'Accept': 'application/json'
            }
            
            response = requests.get(
                "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest",
                headers=headers,
                params={'symbol': item['name'].upper()}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('data'):
                    # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    coin_id = list(data['data'].keys())[0]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    detail_response = requests.get(
                        f"https://pro-api.coinmarketcap.com/v1/cryptocurrency/info",
                        headers=headers,
                        params={'id': coin_id}
                    )
                    
                    if detail_response.status_code == 200:
                        detail_data = detail_response.json()
                        if detail_data.get('data'):
                            coin_info = list(detail_data['data'].values())[0]
                            logo_url = coin_info.get('logo')
                            
                            if logo_url:
                                if item['type'] == 'token':
                                    backup_path = BACKUP_DIR / "tokens" / f"{item['name']}.png"
                                else:
                                    import re
                                    file_name = re.sub(r'[^A-Z0-9]', '', item['name'].upper())
                                    backup_path = BACKUP_DIR / "protocols" / f"{file_name}.png"
                                
                                if download_image(logo_url, backup_path):
                                    restored_count += 1
                                    print(f"‚úÖ Restored {item['name']} via CMC")
                                else:
                                    print(f"‚ùå Failed to download {item['name']}")
                            else:
                                print(f"‚ùå No logo URL for {item['name']}")
                        else:
                            print(f"‚ùå No detail data for {item['name']}")
                    else:
                        print(f"‚ùå Failed to get details for {item['name']}")
                else:
                    print(f"‚ùå No data for {item['name']}")
            else:
                print(f"‚ùå CMC API error for {item['name']}: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Error with CMC API for {item['name']}: {e}")
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(1)
    
    print(f"üìä Restored {restored_count} icons via CMC API")
    return restored_count

def main():
    print("üöÄ Aggressive restoration of remaining missing icons...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    BACKUP_DIR.mkdir(parents=True, exist_ok=True)
    
    total_restored = 0
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º IOTA —Ç–æ–∫–µ–Ω
    if restore_iota_token():
        total_restored += 1
    
    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    total_restored += restore_missing_protocols_aggressive()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º CMC API
    total_restored += use_cmc_api_for_missing()
    
    print(f"\nüìä Aggressive Restoration Summary:")
    print(f"  Total icons restored: {total_restored}")
    
    if total_restored > 0:
        print(f"‚úÖ Successfully restored {total_restored} missing icons!")
    else:
        print(f"‚ùå No icons were restored")

if __name__ == "__main__":
    main()

