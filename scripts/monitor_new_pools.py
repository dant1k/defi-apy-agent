#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª—É—á—à–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.
"""

import asyncio
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Set

from src.tools import discover_new_pools, force_refresh_all_pools

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
POPULAR_TOKENS = ["ETH", "USDC", "USDT", "BTC", "WETH", "DAI", "WBTC", "LINK", "UNI", "AAVE"]
MIN_APY_THRESHOLD = 10.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π APY –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
MIN_TVL_THRESHOLD = 5_000_000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π TVL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
CHECK_INTERVAL = 300  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—É–ª–æ–≤
discovered_pools: Set[str] = set()

def log_new_opportunity(token: str, pool: Dict) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å."""
    apy = pool.get("apy", 0)
    tvl = pool.get("tvl_usd", 0)
    protocol = pool.get("platform", "Unknown")
    chain = pool.get("chain", "Unknown")
    
    logging.info(
        f"üöÄ –ù–û–í–ê–Ø –í–û–ó–ú–û–ñ–ù–û–°–¢–¨: {token} | {protocol} ({chain}) | "
        f"APY: {apy:.2f}% | TVL: ${tvl:,.0f} | "
        f"–†–∏—Å–∫: {pool.get('risk_level', 'Unknown')}"
    )

async def monitor_token(token: str) -> List[Dict]:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ –ø—É–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞."""
    try:
        # –ò—â–µ–º –Ω–æ–≤—ã–µ –ø—É–ª—ã —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        new_pools = discover_new_pools(token, limit=50, force_refresh=True)
        
        opportunities = []
        for pool in new_pools:
            pool_id = pool.get("pool_id")
            if not pool_id or pool_id in discovered_pools:
                continue
                
            apy = float(pool.get("apy", 0))
            tvl = float(pool.get("tvl_usd", 0))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if apy >= MIN_APY_THRESHOLD and tvl >= MIN_TVL_THRESHOLD:
                discovered_pools.add(pool_id)
                log_new_opportunity(token, pool)
                opportunities.append(pool)
        
        return opportunities
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ {token}: {e}")
        return []

async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(message)s",
        handlers=[
            logging.FileHandler("new_pools_monitor.log"),
            logging.StreamHandler()
        ]
    )
    
    logging.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤...")
    logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ç–æ–∫–µ–Ω—ã: {', '.join(POPULAR_TOKENS)}")
    logging.info(f"–ö—Ä–∏—Ç–µ—Ä–∏–∏: APY >= {MIN_APY_THRESHOLD}%, TVL >= ${MIN_TVL_THRESHOLD:,}")
    
    while True:
        try:
            start_time = time.time()
            total_opportunities = 0
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫—ç—à–∏
            force_refresh_all_pools()
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω
            for token in POPULAR_TOKENS:
                opportunities = await monitor_token(token)
                total_opportunities += len(opportunities)
            
            elapsed = time.time() - start_time
            logging.info(f"‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}—Å. –ù–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {total_opportunities}")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(CHECK_INTERVAL)
            
        except KeyboardInterrupt:
            logging.info("üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º

if __name__ == "__main__":
    asyncio.run(main())

