#!/usr/bin/env python3
"""
–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∫–æ–Ω–æ–∫ –Ω–∞ DeFiLlama –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é
"""

import os
import requests
import json
import time
from pathlib import Path
from urllib.parse import quote
import shutil

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_DIR = "api/static/icons"
FRONTEND_DIR = "frontend/public/icons"
COINGECKO_API = "https://api.coingecko.com/api/v3"
DEFILLAMA_API = "https://defillama.com"
CMC_API = "https://pro-api.coinmarketcap.com/v1"
CMC_API_KEY = "4dc743a6ee7f4294a2d34f2969e37014"

def ensure_directories():
    """–°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    for category in ["chains", "protocols", "tokens"]:
        os.makedirs(f"{API_DIR}/{category}", exist_ok=True)
        os.makedirs(f"{FRONTEND_DIR}/{category}", exist_ok=True)

def get_missing_icons():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∫–æ–Ω–æ–∫"""
    missing = {"chains": [], "protocols": [], "tokens": []}
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ API
    try:
        response = requests.get("http://localhost:8000/strategies?min_tvl=1000000&limit=500", timeout=10)
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            chains = set()
            protocols = set()
            tokens = set()
            
            for item in items:
                if item.get("chain"):
                    chains.add(item["chain"])
                if item.get("protocol"):
                    protocols.add(item["protocol"])
                if item.get("token_pair"):
                    for token in item["token_pair"].split("-"):
                        if token.strip():
                            tokens.add(token.strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–∫–æ–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
            import re
            for chain in chains:
                filename = f"{re.sub(r'[^A-Z0-9]', '', chain.upper())}.png"
                if not os.path.exists(f"{API_DIR}/chains/{filename}"):
                    missing["chains"].append((chain, filename))
            
            for protocol in protocols:
                filename = f"{re.sub(r'[^A-Z0-9]', '', protocol.upper())}.png"
                if not os.path.exists(f"{API_DIR}/protocols/{filename}"):
                    missing["protocols"].append((protocol, filename))
            
            for token in tokens:
                filename = f"{token}.png"
                if not os.path.exists(f"{API_DIR}/tokens/{filename}"):
                    missing["tokens"].append((token, filename))
                    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API: {e}")
    
    return missing

def search_defillama_icon(name, category):
    """–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –Ω–∞ DeFiLlama"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ DeFiLlama
        search_terms = [
            name.lower(),
            name.lower().replace("-", ""),
            name.lower().replace("_", ""),
            name.lower().replace(".", ""),
        ]
        
        for term in search_terms:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ API DeFiLlama
            if category == "protocols":
                # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
                url = f"https://api.llama.fi/protocol/{term}"
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if "logo" in data:
                        return data["logo"]
            
            elif category == "chains":
                # –ü–æ–∏—Å–∫ —Å–µ—Ç–µ–π
                url = f"https://api.llama.fi/chains"
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    chains = response.json()
                    for chain in chains:
                        if (chain.get("name", "").lower() == term or 
                            chain.get("tokenSymbol", "").lower() == term):
                            return chain.get("logo")
            
            elif category == "tokens":
                # –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ DeFiLlama
                url = f"https://coins.llama.fi/prices/current/{term}"
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if "coins" in data:
                        for coin_id, coin_data in data["coins"].items():
                            if coin_data.get("symbol", "").lower() == term.lower():
                                return coin_data.get("logo")
        
        return None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ DeFiLlama –¥–ª—è {name}: {e}")
        return None

def search_coingecko_icon(name, category):
    """–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –Ω–∞ CoinGecko"""
    try:
        if category == "tokens":
            # –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤
            search_terms = [
                name.lower(),
                name.lower().replace("-", ""),
                name.lower().replace("_", ""),
            ]
            
            for term in search_terms:
                # –ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É
                url = f"{COINGECKO_API}/coins/{term}"
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if "image" in data:
                        return data["image"]
                
                # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫
                url = f"{COINGECKO_API}/coins/list"
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                    coins = response.json()
                    for coin in coins:
                        if (coin.get("symbol", "").lower() == term.lower() or 
                            coin.get("id", "").lower() == term.lower()):
                            coin_id = coin["id"]
                            coin_url = f"{COINGECKO_API}/coins/{coin_id}"
                            coin_response = requests.get(coin_url, timeout=10)
                            if coin_response.status_code == 200:
                                coin_data = coin_response.json()
                                if "image" in coin_data:
                                    return coin_data["image"]
        
        return None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ CoinGecko –¥–ª—è {name}: {e}")
        return None

def search_cmc_icon(name, category):
    """–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –Ω–∞ CoinMarketCap"""
    try:
        if category == "tokens":
            headers = {
                'X-CMC_PRO_API_KEY': CMC_API_KEY,
                'Accept': 'application/json'
            }
            
            # –ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É
            url = f"{CMC_API}/cryptocurrency/quotes/latest"
            params = {'symbol': name.upper()}
            response = requests.get(url, headers=headers, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if "data" in data and data["data"]:
                    for coin_data in data["data"].values():
                        if "logo" in coin_data:
                            return coin_data["logo"]
        
        return None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ CMC –¥–ª—è {name}: {e}")
        return None

def download_icon(url, filename, category):
    """–°–∫–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É"""
    try:
        if not url or not url.startswith(('http://', 'https://')):
            return False
            
        response = requests.get(url, timeout=15)
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ API
            api_path = f"{API_DIR}/{category}/{filename}"
            with open(api_path, 'wb') as f:
                f.write(response.content)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ frontend
            frontend_path = f"{FRONTEND_DIR}/{category}/{filename}"
            shutil.copy2(api_path, frontend_path)
            
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∫–æ–Ω–æ–∫ –Ω–∞ DeFiLlama...")
    
    ensure_directories()
    missing = get_missing_icons()
    
    total_missing = sum(len(items) for items in missing.values())
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_missing} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∫–æ–Ω–æ–∫")
    
    downloaded = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for category, items in missing.items():
        if not items:
            continue
            
        print(f"\nüîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ {category}...")
        
        for name, filename in items:
            print(f"üîç –ò—â–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è {name}...")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            icon_url = None
            
            # 1. DeFiLlama
            icon_url = search_defillama_icon(name, category)
            if icon_url:
                print(f"  üìç –ù–∞–π–¥–µ–Ω–æ –Ω–∞ DeFiLlama: {icon_url}")
            
            # 2. CoinGecko (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ DeFiLlama)
            if not icon_url and category == "tokens":
                icon_url = search_coingecko_icon(name, category)
                if icon_url:
                    print(f"  üìç –ù–∞–π–¥–µ–Ω–æ –Ω–∞ CoinGecko: {icon_url}")
            
            # 3. CoinMarketCap (–µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
            if not icon_url and category == "tokens":
                icon_url = search_cmc_icon(name, category)
                if icon_url:
                    print(f"  üìç –ù–∞–π–¥–µ–Ω–æ –Ω–∞ CMC: {icon_url}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ
            if icon_url:
                if download_icon(icon_url, filename, category):
                    print(f"  ‚úÖ –°–∫–∞—á–∞–Ω–æ: {filename}")
                    downloaded += 1
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {filename}")
            else:
                print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {filename}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.5)
    
    print(f"\nüéâ –ò–¢–û–ì–û:")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {downloaded}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {total_missing - downloaded}")
    print(f"üìÅ –í—Å–µ –∏–∫–æ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ –±–µ–∫–µ–Ω–¥–µ –≤: {API_DIR}")

if __name__ == "__main__":
    main()
