#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –í–°–ï–• –∏–∫–æ–Ω–æ–∫ —Å–µ—Ç–µ–π –∏–∑ DeFiLlama
"""

import os
import requests
import json
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ICONS_DIR = Path("frontend/public/icons/chains")
CHAINS_FILE = "frontend/public/data/all_chains.json"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
ICONS_DIR.mkdir(parents=True, exist_ok=True)
ICONS_DIR.parent.parent.joinpath("data").mkdir(exist_ok=True)

def download_image(url: str, path: Path) -> bool:
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    try:
        if not url or not url.startswith('http'):
            return False
            
        response = requests.get(url, timeout=15)
        if response.status_code == 200:
            with open(path, 'wb') as f:
                f.write(response.content)
            print(f"‚úì Downloaded: {path.name}")
            return True
    except Exception as e:
        print(f"‚úó Failed {path.name}: {e}")
    return False

def get_coin_icon_from_gecko(gecko_id: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å URL –∏–∫–æ–Ω–∫–∏ –∏–∑ CoinGecko –ø–æ gecko_id"""
    try:
        response = requests.get(f"https://api.coingecko.com/api/v3/coins/{gecko_id}")
        if response.status_code == 200:
            data = response.json()
            return data.get("image", {}).get("large", "")
    except:
        pass
    return ""

def get_all_defillama_chains():
    """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï —Å–µ—Ç–∏ –∏–∑ DeFiLlama"""
    try:
        print("üåê Fetching all chains from DeFiLlama...")
        response = requests.get("https://api.llama.fi/chains")
        
        if response.status_code == 200:
            chains = response.json()
            chain_data = []
            downloaded_count = 0
            
            print(f"Found {len(chains)} chains total")
            
            for i, chain in enumerate(chains, 1):
                name = chain.get("name", "")
                tokenSymbol = chain.get("tokenSymbol", "")
                gecko_id = chain.get("gecko_id", "")
                
                print(f"[{i}/{len(chains)}] Processing: {name}")
                
                if name and gecko_id:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –∏–∑ CoinGecko
                    logo_url = get_coin_icon_from_gecko(gecko_id)
                    
                    if logo_url:
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
                        file_name = name.replace(" ", "").replace("-", "").replace("_", "")
                        file_name = "".join(c for c in file_name if c.isalnum())
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
                        icon_path = ICONS_DIR / f"{file_name}.png"
                        if download_image(logo_url, icon_path):
                            chain_data.append({
                                "name": name,
                                "symbol": tokenSymbol,
                                "icon": f"/icons/chains/{file_name}.png",
                                "logo_url": logo_url,
                                "chain_id": chain.get("chainId"),
                                "gecko_id": gecko_id
                            })
                            downloaded_count += 1
                
                # Rate limiting
                time.sleep(0.2)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50
                if i % 50 == 0:
                    print(f"Progress: {i}/{len(chains)} chains processed, {downloaded_count} icons downloaded")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(CHAINS_FILE, 'w') as f:
                json.dump(chain_data, f, indent=2)
            
            print(f"\n‚úÖ Complete! Downloaded {downloaded_count} chain icons from {len(chains)} total chains")
            print(f"üìÅ Icons saved to: {ICONS_DIR}")
            print(f"üìÑ Data saved to: {CHAINS_FILE}")
            
            return chain_data
            
    except Exception as e:
        print(f"‚úó Error getting chains from DeFiLlama: {e}")
    
    return []

def main():
    print("üöÄ Starting COMPLETE chain icon download from DeFiLlama...")
    print("‚ö†Ô∏è  This will download ALL available chain icons (may take a while)")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ç–∏
    chains = get_all_defillama_chains()
    
    if chains:
        print(f"\nüéâ Successfully downloaded {len(chains)} chain icons!")
        print("Now you have comprehensive chain icon coverage for your DeFi app!")
    else:
        print("\n‚ùå Failed to download chain icons")

if __name__ == "__main__":
    main()
