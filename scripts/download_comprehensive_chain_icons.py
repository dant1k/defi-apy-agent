#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–æ–∫ —Å–µ—Ç–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import os
import requests
import json
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ICONS_DIR = Path("frontend/public/icons/chains")
CHAINS_FILE = "frontend/public/data/comprehensive_chains.json"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
ICONS_DIR.mkdir(parents=True, exist_ok=True)
ICONS_DIR.parent.parent.joinpath("data").mkdir(exist_ok=True)

def download_image(url: str, path: Path) -> bool:
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    try:
        if not url or not url.startswith('http'):
            return False
            
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            with open(path, 'wb') as f:
                f.write(response.content)
            print(f"‚úì Downloaded: {path.name}")
            return True
    except Exception as e:
        print(f"‚úó Failed {path.name}: {e}")
    return False

def get_coin_icon_from_gecko(gecko_id: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å URL –∏–∫–æ–Ω–∫–∏ –∏–∑ CoinGecko –ø–æ gecko_id"""
    try:
        response = requests.get(f"https://api.coingecko.com/api/v3/coins/{gecko_id}")
        if response.status_code == 200:
            data = response.json()
            return data.get("image", {}).get("large", "")
    except:
        pass
    return ""

def search_coin_icon_by_name(name: str) -> str:
    """–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –≤ CoinGecko"""
    try:
        response = requests.get("https://api.coingecko.com/api/v3/search", params={
            "query": name
        })
        if response.status_code == 200:
            data = response.json()
            if data.get("coins"):
                coin = data["coins"][0]
                return coin.get("large", "")
    except:
        pass
    return ""

def get_defillama_chains():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Ç–∏ –∏–∑ DeFiLlama"""
    try:
        print("üåê Fetching all chains from DeFiLlama...")
        response = requests.get("https://api.llama.fi/chains")
        
        if response.status_code == 200:
            return response.json()
    except Exception as e:
        print(f"‚úó Error getting chains from DeFiLlama: {e}")
    
    return []

def download_comprehensive_chain_icons():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫ —Å–µ—Ç–µ–π"""
    chains = get_defillama_chains()
    if not chains:
        return []
    
    chain_data = []
    downloaded_count = 0
    
    print(f"Found {len(chains)} chains total")
    
    for i, chain in enumerate(chains, 1):
        name = chain.get("name", "")
        tokenSymbol = chain.get("tokenSymbol", "")
        gecko_id = chain.get("gecko_id", "")
        
        print(f"[{i}/{len(chains)}] Processing: {name}")
        
        if not name:
            continue
            
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
        file_name = name.replace(" ", "").replace("-", "").replace("_", "")
        file_name = "".join(c for c in file_name if c.isalnum())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–∫–æ–Ω–∫–∞
        icon_path = ICONS_DIR / f"{file_name}.png"
        if icon_path.exists():
            print(f"  ‚Üí Already exists: {file_name}.png")
            chain_data.append({
                "name": name,
                "symbol": tokenSymbol,
                "icon": f"/icons/chains/{file_name}.png",
                "chain_id": chain.get("chainId"),
                "gecko_id": gecko_id
            })
            continue
        
        logo_url = ""
        
        # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ gecko_id
        if gecko_id:
            logo_url = get_coin_icon_from_gecko(gecko_id)
            if logo_url:
                print(f"  ‚Üí Found via gecko_id: {gecko_id}")
        
        # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
        if not logo_url:
            logo_url = search_coin_icon_by_name(name)
            if logo_url:
                print(f"  ‚Üí Found via name search: {name}")
        
        # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É —Ç–æ–∫–µ–Ω–∞
        if not logo_url and tokenSymbol:
            logo_url = search_coin_icon_by_name(tokenSymbol)
            if logo_url:
                print(f"  ‚Üí Found via token symbol: {tokenSymbol}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
        if logo_url and download_image(logo_url, icon_path):
            chain_data.append({
                "name": name,
                "symbol": tokenSymbol,
                "icon": f"/icons/chains/{file_name}.png",
                "logo_url": logo_url,
                "chain_id": chain.get("chainId"),
                "gecko_id": gecko_id
            })
            downloaded_count += 1
        else:
            print(f"  ‚Üí No icon found for: {name}")
        
        # Rate limiting
        time.sleep(0.15)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50
        if i % 50 == 0:
            print(f"Progress: {i}/{len(chains)} chains processed, {downloaded_count} new icons downloaded")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    with open(CHAINS_FILE, 'w') as f:
        json.dump(chain_data, f, indent=2)
    
    print(f"\n‚úÖ Complete! Downloaded {downloaded_count} new chain icons from {len(chains)} total chains")
    print(f"üìÅ Total icons in directory: {len(list(ICONS_DIR.glob('*.png')))}")
    print(f"üìÑ Data saved to: {CHAINS_FILE}")
    
    return chain_data

def main():
    print("üöÄ Starting COMPREHENSIVE chain icon download...")
    print("üîç Using multiple methods: gecko_id, name search, token symbol search")
    
    chains = download_comprehensive_chain_icons()
    
    if chains:
        print(f"\nüéâ Successfully processed {len(chains)} chains!")
        print("Now you have comprehensive chain icon coverage for your DeFi app!")
    else:
        print("\n‚ùå Failed to download chain icons")

if __name__ == "__main__":
    main()

