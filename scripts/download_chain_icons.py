#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–æ–∫ —Å–µ—Ç–µ–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import os
import requests
import json
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ICONS_DIR = Path("frontend/public/icons/chains")
CHAINS_FILE = "frontend/public/data/chains.json"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
ICONS_DIR.mkdir(parents=True, exist_ok=True)
ICONS_DIR.parent.parent.joinpath("data").mkdir(exist_ok=True)

def download_image(url: str, path: Path) -> bool:
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    try:
        if not url or not url.startswith('http'):
            return False
            
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            with open(path, 'wb') as f:
                f.write(response.content)
            print(f"‚úì Downloaded: {path.name}")
            return True
    except Exception as e:
        print(f"‚úó Failed {path.name}: {e}")
    return False

def get_defillama_chains():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π –∏–∑ DeFiLlama"""
    try:
        response = requests.get("https://api.llama.fi/chains")
        
        if response.status_code == 200:
            chains = response.json()
            chain_data = []
            
            for chain in chains:
                name = chain.get("name", "")
                tokenSymbol = chain.get("tokenSymbol", "")
                logo = chain.get("logo", "")
                
                if name and logo:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
                    file_name = name.replace(" ", "").replace("-", "").replace("_", "")
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
                    icon_path = ICONS_DIR / f"{file_name}.png"
                    if download_image(logo, icon_path):
                        chain_data.append({
                            "name": name,
                            "symbol": tokenSymbol,
                            "icon": f"/icons/chains/{file_name}.png",
                            "logo_url": logo
                        })
                
                time.sleep(0.1)  # Rate limiting
            
            print(f"‚úì Downloaded {len(chain_data)} chain icons from DeFiLlama")
            return chain_data
            
    except Exception as e:
        print(f"‚úó Error getting chains from DeFiLlama: {e}")
    
    return []

def get_coingecko_chains():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ç–∏ –∏–∑ CoinGecko"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º asset platforms
        response = requests.get("https://api.coingecko.com/api/v3/asset_platforms")
        
        if response.status_code == 200:
            platforms = response.json()
            chain_data = []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ç–∏
            popular_chains = [
                "ethereum", "binance-smart-chain", "polygon-pos", "avalanche",
                "arbitrum-one", "optimistic-ethereum", "solana", "aptos",
                "sui", "base", "linea", "mantle", "fantom", "cronos",
                "ton", "near", "algorand", "cosmos", "polkadot", "cardano",
                "tron", "stellar", "litecoin", "bitcoin-cash", "dogecoin"
            ]
            
            for platform in platforms:
                if platform["id"] in popular_chains:
                    name = platform["name"]
                    chain_id = platform["id"]
                    
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–∫–æ–Ω–∫—É —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
                    search_response = requests.get("https://api.coingecko.com/api/v3/search", params={
                        "query": name
                    })
                    
                    if search_response.status_code == 200:
                        search_data = search_response.json()
                        if search_data["coins"]:
                            coin = search_data["coins"][0]
                            image_url = coin["large"]
                            
                            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
                            file_name = name.replace(" ", "").replace("-", "").replace("_", "")
                            
                            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
                            icon_path = ICONS_DIR / f"{file_name}.png"
                            if download_image(image_url, icon_path):
                                chain_data.append({
                                    "name": name,
                                    "id": chain_id,
                                    "icon": f"/icons/chains/{file_name}.png",
                                    "logo_url": image_url
                                })
                    
                    time.sleep(0.2)  # Rate limiting
            
            print(f"‚úì Downloaded {len(chain_data)} chain icons from CoinGecko")
            return chain_data
            
    except Exception as e:
        print(f"‚úó Error getting chains from CoinGecko: {e}")
    
    return []

def main():
    print("üöÄ Starting chain icon download...")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑ DeFiLlama
    print("\nüåê Downloading from DeFiLlama...")
    defillama_chains = get_defillama_chains()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑ CoinGecko
    print("\nüì± Downloading from CoinGecko...")
    coingecko_chains = get_coingecko_chains()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_chains = defillama_chains + coingecko_chains
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∏–º–µ–Ω–∏
    unique_chains = []
    seen_names = set()
    for chain in all_chains:
        if chain["name"] not in seen_names:
            unique_chains.append(chain)
            seen_names.add(chain["name"])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    with open(CHAINS_FILE, 'w') as f:
        json.dump(unique_chains, f, indent=2)
    
    print(f"\n‚úÖ Complete! Downloaded {len(unique_chains)} unique chain icons")
    print(f"üìÅ Icons saved to: {ICONS_DIR}")
    print(f"üìÑ Data saved to: {CHAINS_FILE}")

if __name__ == "__main__":
    main()

