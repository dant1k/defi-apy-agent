#!/usr/bin/env python3
"""
–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∫–æ–Ω–æ–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
"""

import os
import requests
import json
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BACKUP_DIR = Path("api/static/icons")

def download_image(url: str, path: Path) -> bool:
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    try:
        if not url or not url.startswith('http'):
            return False
            
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            with open(path, 'wb') as f:
                f.write(response.content)
            print(f"‚úì Downloaded: {path.name}")
            return True
    except Exception as e:
        print(f"‚úó Failed {path.name}: {e}")
    return False

def search_coingecko_by_name(name: str) -> str:
    """–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –≤ CoinGecko"""
    try:
        response = requests.get("https://api.coingecko.com/api/v3/search", params={
            "query": name
        })
        if response.status_code == 200:
            data = response.json()
            if data.get("coins"):
                coin = data["coins"][0]
                return coin.get("large", "")
    except:
        pass
    return ""

def search_coingecko_by_id(gecko_id: str) -> str:
    """–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –ø–æ gecko_id –≤ CoinGecko"""
    try:
        response = requests.get(f"https://api.coingecko.com/api/v3/coins/{gecko_id}")
        if response.status_code == 200:
            data = response.json()
            return data.get("image", {}).get("large", "")
    except:
        pass
    return ""

def search_coingecko_by_symbol(symbol: str) -> str:
    """–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª—É –≤ CoinGecko"""
    try:
        response = requests.get("https://api.coingecko.com/api/v3/search", params={
            "query": symbol
        })
        if response.status_code == 200:
            data = response.json()
            if data.get("coins"):
                for coin in data["coins"]:
                    if coin.get("symbol", "").upper() == symbol.upper():
                        return coin.get("large", "")
    except:
        pass
    return ""

def normalize_name(name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞"""
    return name.replace(" ", "").replace("-", "").replace("_", "").replace(".", "")

def aggressive_search_chain(chain_name: str) -> str:
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å–µ—Ç–∏"""
    print(f"üîç Aggressive search for: {chain_name}")
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
    icon_url = search_coingecko_by_name(chain_name)
    if icon_url:
        print(f"  ‚Üí Found via name search")
        return icon_url
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–∏—Å–∫ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∏–º–µ–Ω–∏
    normalized = chain_name.replace(" ", "").replace("-", "").replace("_", "")
    if normalized != chain_name:
        icon_url = search_coingecko_by_name(normalized)
        if icon_url:
            print(f"  ‚Üí Found via normalized name")
            return icon_url
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –∏–º–µ–Ω–∏
    parts = chain_name.split()
    for part in parts:
        if len(part) > 3:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏
            icon_url = search_coingecko_by_name(part)
            if icon_url:
                print(f"  ‚Üí Found via part: {part}")
                return icon_url
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if len(chain_name) <= 5:  # –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–∏–º–≤–æ–ª
        icon_url = search_coingecko_by_symbol(chain_name)
        if icon_url:
            print(f"  ‚Üí Found via symbol search")
            return icon_url
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 5: –ü–æ–∏—Å–∫ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
    alternatives = {
        "Bitcoincash": "Bitcoin Cash",
        "Cronos_zkevm": "Cronos",
        "Defichain": "DeFiChain",
        "Echelon_initia": "Initia",
        "Fuel-ignition": "Fuel",
        "IOTA EVM": "IOTA",
        "Op_bnb": "BNB Chain",
        "Opbnb": "BNB Chain",
        "Plume Mainnet": "Plume",
        "avax": "Avalanche",
        "canto": "Canto",
        "emerald": "Emerald",
        "fraxtal": "Fraxtal",
        "fuse": "Fuse",
        "moonriver": "Moonriver",
        "one": "Harmony",
        "optimism": "Optimism",
        "real": "Real",
        "rootstock": "Rootstock",
        "scroll": "Scroll",
        "sei": "Sei",
        "zkevm": "zkEVM",
        "zksync": "zkSync"
    }
    
    if chain_name in alternatives:
        alt_name = alternatives[chain_name]
        icon_url = search_coingecko_by_name(alt_name)
        if icon_url:
            print(f"  ‚Üí Found via alternative: {alt_name}")
            return icon_url
    
    print(f"  ‚Üí No icon found")
    return ""

def download_remaining_chains():
    """–°–∫–∞—á–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∫–æ–Ω–∫–∏ —Å–µ—Ç–µ–π"""
    print("üåê Aggressive search for remaining chain icons...")
    
    # –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ—Ç–∏ –±–µ–∑ –∏–∫–æ–Ω–æ–∫
    remaining_chains = [
        "Chiliz", "Conflux", "Core", "Cronos_zkevm", "Defichain", "Echelon_initia", 
        "Filecoin", "Flare", "Flow", "Fraxtal", "Fuel-ignition", "Gravity", "Hemi", 
        "Hyperliquid", "IOTA EVM", "Karura", "Klaytn", "Kusama", "Libre", "Moonriver", 
        "Morph", "Move", "Movement", "MultiversX", "Neo", "Neutron", "Nolus", "Obyte", 
        "Ontology", "Op_bnb", "Opbnb", "Optimism", "Persistence", "Plume Mainnet", 
        "Polynomial", "Rollux", "Rootstock", "Scroll", "Sei", "Stacks", "Starknet", 
        "Swell", "Tac", "Taiko", "Telos", "Tezos", "avax", "canto", "emerald", 
        "fraxtal", "fuse", "moonriver", "one", "optimism", "real", "rootstock", 
        "scroll", "sei", "zkevm", "zksync"
    ]
    
    downloaded = 0
    for chain in remaining_chains:
        file_name = normalize_name(chain)
        backup_path = BACKUP_DIR / "chains" / f"{file_name}.png"
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        if backup_path.exists():
            continue
        
        icon_url = aggressive_search_chain(chain)
        
        if icon_url:
            backup_path.parent.mkdir(parents=True, exist_ok=True)
            if download_image(icon_url, backup_path):
                downloaded += 1
        
        time.sleep(0.3)  # Rate limiting
    
    print(f"‚úì Downloaded {downloaded} new chain icons with aggressive search")

def download_remaining_tokens():
    """–°–∫–∞—á–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∫–æ–Ω–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
    print("\nü™ô Aggressive search for remaining token icons...")
    
    remaining_tokens = ["DEXE"]
    
    downloaded = 0
    for token in remaining_tokens:
        backup_path = BACKUP_DIR / "tokens" / f"{token}.png"
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        if backup_path.exists():
            continue
        
        print(f"üîç Aggressive search for token: {token}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞
        icon_url = search_coingecko_by_name(token)
        if not icon_url:
            icon_url = search_coingecko_by_symbol(token)
        
        if icon_url:
            backup_path.parent.mkdir(parents=True, exist_ok=True)
            if download_image(icon_url, backup_path):
                downloaded += 1
        
        time.sleep(0.3)  # Rate limiting
    
    print(f"‚úì Downloaded {downloaded} new token icons with aggressive search")

def download_remaining_protocols():
    """–°–∫–∞—á–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"""
    print("\nüèõÔ∏è Aggressive search for remaining protocol icons...")
    
    remaining_protocols = [
        "full-sail", "gammaswap-yield-tokens", "impermax-v2", "jito-liquid-staking", 
        "lista-lending", "moonwell-lending"
    ]
    
    downloaded = 0
    for protocol in remaining_protocols:
        import re
        file_name = re.sub(r'[^A-Z0-9]', '', protocol.upper())
        backup_path = BACKUP_DIR / "protocols" / f"{file_name}.png"
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        if backup_path.exists():
            continue
        
        print(f"üîç Aggressive search for protocol: {protocol}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞
        icon_url = search_coingecko_by_name(protocol)
        if not icon_url:
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤
            clean_name = protocol.replace("-", " ")
            icon_url = search_coingecko_by_name(clean_name)
        
        if icon_url:
            backup_path.parent.mkdir(parents=True, exist_ok=True)
            if download_image(icon_url, backup_path):
                downloaded += 1
        
        time.sleep(0.3)  # Rate limiting
    
    print(f"‚úì Downloaded {downloaded} new protocol icons with aggressive search")

def main():
    print("üöÄ Aggressive search for remaining missing icons...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    BACKUP_DIR.mkdir(parents=True, exist_ok=True)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∫–æ–Ω–∫–∏
    download_remaining_chains()
    download_remaining_tokens()
    download_remaining_protocols()
    
    print("\n‚úÖ Aggressive search complete!")
    print("Check the results and run coverage check again.")

if __name__ == "__main__":
    main()

