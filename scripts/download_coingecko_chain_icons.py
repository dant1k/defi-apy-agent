#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫ —Å–µ—Ç–µ–π —Å CoinGecko
"""

import requests
import os
import shutil
import time
from typing import Dict, List, Any

API_STATIC_DIR = "api/static/icons"
FRONTEND_PUBLIC_DIR = "frontend/public/icons"

def get_coingecko_chain_icon_url(chain_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º URL –∏–∫–æ–Ω–∫–∏ —Å–µ—Ç–∏ —Å CoinGecko"""
    return f"https://assets.coingecko.com/coins/images/1/large/{chain_id}.png"

def download_icon(url: str, save_path: str) -> bool:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫—É"""
    try:
        response = requests.get(url, stream=True, timeout=10)
        response.raise_for_status()
        
        with open(save_path, 'wb') as out_file:
            shutil.copyfileobj(response.raw, out_file)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
        return False

def get_our_chains_with_coingecko_mapping() -> Dict[str, str]:
    """–ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –Ω–∞—à–∏—Ö —Å–µ—Ç–µ–π –Ω–∞ CoinGecko"""
    return {
        "Aptos": "aptos",
        "Arbitrum": "arbitrum-one", 
        "Avalanche": "avalanche",
        "BSC": "binance-smart-chain",
        "Base": "base",
        "Berachain": "berachain",
        "Cardano": "cardano",
        "Celo": "celo",
        "Core": "core",
        "Cronos": "cronos",
        "Ethereum": "ethereum",
        "Etherlink": "etherlink",
        "Fantom": "fantom",
        "Filecoin": "filecoin",
        "Flow": "flow",
        "Fraxtal": "fraxtal",
        "Fuel-ignition": "fuel-ignition",
        "Hemi": "hemi",
        "Hyperliquid": "hyperliquid",
        "Linea": "linea",
        "Mainnet": "ethereum",  # Mainnet —ç—Ç–æ Ethereum
        "MultiversX": "elrond",
        "Neo": "neo",
        "Optimism": "optimistic-ethereum",
        "Osmosis": "osmosis",
        "Plasma": "plasma",
        "Polkadot": "polkadot",
        "Solana": "solana",
        "Sonic": "sonic",
        "Starknet": "starknet",
        "Stellar": "stellar",
        "Sui": "sui",
        "Ton": "the-open-network"
    }

def normalize_chain_name(chain_name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Å–µ—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–∞"""
    return chain_name.upper().replace(" ", "").replace("-", "").replace(".", "")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ —Å–µ—Ç–µ–π —Å CoinGecko...")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(os.path.join(API_STATIC_DIR, "chains"), exist_ok=True)
    os.makedirs(os.path.join(FRONTEND_PUBLIC_DIR, "chains"), exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
    chain_mapping = get_our_chains_with_coingecko_mapping()
    
    downloaded_count = 0
    failed_count = 0
    
    for our_chain, cg_id in chain_mapping.items():
        print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {our_chain} -> {cg_id}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
        filename = f"{normalize_chain_name(our_chain)}.png"
        api_path = os.path.join(API_STATIC_DIR, "chains", filename)
        frontend_path = os.path.join(FRONTEND_PUBLIC_DIR, "chains", filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª
        if os.path.exists(api_path):
            print(f"  ‚úÖ {our_chain} - —É–∂–µ –µ—Å—Ç—å")
            # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not os.path.exists(frontend_path):
                shutil.copy(api_path, frontend_path)
                print(f"  üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥")
            continue
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL
        urls_to_try = [
            f"https://assets.coingecko.com/coins/images/1/large/{cg_id}.png",
            f"https://assets.coingecko.com/coins/images/1/small/{cg_id}.png",
            f"https://assets.coingecko.com/coins/images/1/{cg_id}.png",
            f"https://assets.coingecko.com/coins/images/{cg_id}.png"
        ]
        
        success = False
        for url in urls_to_try:
            print(f"  üîó –ü—Ä–æ–±—É–µ–º: {url}")
            if download_icon(url, api_path):
                print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {filename}")
                # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
                shutil.copy(api_path, frontend_path)
                print(f"  üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥")
                downloaded_count += 1
                success = True
                break
            time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        if not success:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {our_chain}")
            failed_count += 1
    
    print(f"\nüéâ –ò–¢–û–ì–ò:")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {downloaded_count}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}")
    print(f"üìÅ –ò–∫–æ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {API_STATIC_DIR}/chains")
    print(f"üìÅ –ò–∫–æ–Ω–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤: {FRONTEND_PUBLIC_DIR}/chains")

if __name__ == "__main__":
    main()
