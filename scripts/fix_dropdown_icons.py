#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∫–æ–Ω–æ–∫ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é
"""

import os
import requests
import json
import time
from pathlib import Path
import shutil
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_DIR = "api/static/icons"
FRONTEND_DIR = "frontend/public/icons"
COINGECKO_API = "https://api.coingecko.com/api/v3"
DEFILLAMA_API = "https://api.llama.fi"
CMC_API = "https://pro-api.coinmarketcap.com/v1"
CMC_API_KEY = "4dc743a6ee7f4294a2d34f2969e37014"

def ensure_directories():
    """–°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    for category in ["chains", "protocols", "tokens"]:
        os.makedirs(f"{API_DIR}/{category}", exist_ok=True)
        os.makedirs(f"{FRONTEND_DIR}/{category}", exist_ok=True)

def get_dropdown_missing_icons():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∫–æ–Ω–æ–∫ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é"""
    missing = {"protocols": [], "tokens": []}
    
    try:
        response = requests.get("http://localhost:8000/strategies?min_tvl=1000000&limit=500", timeout=10)
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            protocols = set()
            tokens = set()
            
            for item in items:
                if item.get("protocol"):
                    protocols.add(item["protocol"])
                if item.get("token_pair"):
                    for token in item["token_pair"].split("-"):
                        if token.strip():
                            tokens.add(token.strip())
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
            missing_protocols = [
                "astroport",
                "silo-v2", 
                "sushiswap-v3"
            ]
            
            for protocol in missing_protocols:
                if protocol in protocols:
                    filename = f"{re.sub(r'[^A-Z0-9]', '', protocol.upper())}.png"
                    if not os.path.exists(f"{API_DIR}/protocols/{filename}"):
                        missing["protocols"].append((protocol, filename))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã (–ø–µ—Ä–≤—ã–µ 20 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö)
            important_tokens = [
                "$MYRO", "20261231", "4", "40AVAX", "80RZR", "9SUSDC",
                "ACRV", "AI16Z", "AIDAUSDC", "AIDAUSDT", "ATONE", "BNEO",
                "CUSDX", "DYFI", "EPENDLE", "ESFDX", "FBEETS", "FRAX",
                "FRAXBP", "FRXUSD", "FTM", "FUEL", "FXRP", "FXS"
            ]
            
            for token in important_tokens:
                if token in tokens:
                    filename = f"{token}.png"
                    if not os.path.exists(f"{API_DIR}/tokens/{filename}"):
                        missing["tokens"].append((token, filename))
                        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ API: {e}")
    
    return missing

def search_protocol_icon(protocol_name):
    """–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    try:
        # 1. DeFiLlama –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
        url = f"{DEFILLAMA_API}/protocol/{protocol_name.lower().replace('-', '')}"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if "logo" in data:
                return data["logo"]
        
        # 2. DeFiLlama —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
        url = f"{DEFILLAMA_API}/protocols"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            protocols = response.json()
            for protocol in protocols:
                if (protocol.get("name", "").lower() == protocol_name.lower() or
                    protocol.get("slug", "").lower() == protocol_name.lower()):
                    return protocol.get("logo")
        
        # 3. –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º URL
        known_protocols = {
            "astroport": "https://assets.astroport.fi/tokens/astroport.png",
            "silo-v2": "https://raw.githubusercontent.com/silo-finance/brand-kit/main/silo-logo.png",
            "sushiswap-v3": "https://raw.githubusercontent.com/sushiswap/icons/master/token/sushi.png"
        }
        
        if protocol_name.lower() in known_protocols:
            return known_protocols[protocol_name.lower()]
        
        return None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {protocol_name}: {e}")
        return None

def search_token_icon(token_symbol):
    """–ü–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ —Ç–æ–∫–µ–Ω–∞"""
    try:
        # 1. CoinGecko –ø–æ —Å–∏–º–≤–æ–ª—É
        url = f"{COINGECKO_API}/coins/{token_symbol.lower()}"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if "image" in data:
                return data["image"]
        
        # 2. CoinGecko –ø–æ–∏—Å–∫ –ø–æ —Å–ø–∏—Å–∫—É
        url = f"{COINGECKO_API}/coins/list"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            coins = response.json()
            for coin in coins:
                if coin.get("symbol", "").upper() == token_symbol.upper():
                    coin_id = coin["id"]
                    coin_url = f"{COINGECKO_API}/coins/{coin_id}"
                    coin_response = requests.get(coin_url, timeout=10)
                    if coin_response.status_code == 200:
                        coin_data = coin_response.json()
                        if "image" in coin_data:
                            return coin_data["image"]
        
        # 3. DeFiLlama —Ç–æ–∫–µ–Ω—ã
        url = f"https://coins.llama.fi/prices/current/{token_symbol.lower()}"
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if "coins" in data:
                for coin_id, coin_data in data["coins"].items():
                    if coin_data.get("symbol", "").upper() == token_symbol.upper():
                        return coin_data.get("logo")
        
        # 4. CoinMarketCap
        headers = {
            'X-CMC_PRO_API_KEY': CMC_API_KEY,
            'Accept': 'application/json'
        }
        url = f"{CMC_API}/cryptocurrency/quotes/latest"
        params = {'symbol': token_symbol.upper()}
        response = requests.get(url, headers=headers, params=params, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if "data" in data and data["data"]:
                for coin_data in data["data"].values():
                    if "logo" in coin_data:
                        return coin_data["logo"]
        
        return None
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–∞ {token_symbol}: {e}")
        return None

def download_icon(url, filename, category):
    """–°–∫–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É"""
    try:
        if not url or not url.startswith(('http://', 'https://')):
            return False
            
        response = requests.get(url, timeout=15)
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ API
            api_path = f"{API_DIR}/{category}/{filename}"
            with open(api_path, 'wb') as f:
                f.write(response.content)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –≤ frontend
            frontend_path = f"{FRONTEND_DIR}/{category}/{filename}"
            shutil.copy2(api_path, frontend_path)
            
            return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {url}: {e}")
    
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é...")
    
    ensure_directories()
    missing = get_dropdown_missing_icons()
    
    total_missing = len(missing["protocols"]) + len(missing["tokens"])
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_missing} –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∏–∫–æ–Ω–æ–∫ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é")
    
    downloaded = 0
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
    if missing["protocols"]:
        print(f"\nüîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤...")
        for name, filename in missing["protocols"]:
            print(f"üîç –ò—â–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ {name}...")
            
            icon_url = search_protocol_icon(name)
            if icon_url:
                print(f"  üìç –ù–∞–π–¥–µ–Ω–æ: {icon_url}")
                if download_icon(icon_url, filename, "protocols"):
                    print(f"  ‚úÖ –°–∫–∞—á–∞–Ω–æ: {filename}")
                    downloaded += 1
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {filename}")
            else:
                print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {filename}")
            
            time.sleep(1)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    if missing["tokens"]:
        print(f"\nüîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤...")
        for name, filename in missing["tokens"]:
            print(f"üîç –ò—â–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {name}...")
            
            icon_url = search_token_icon(name)
            if icon_url:
                print(f"  üìç –ù–∞–π–¥–µ–Ω–æ: {icon_url}")
                if download_icon(icon_url, filename, "tokens"):
                    print(f"  ‚úÖ –°–∫–∞—á–∞–Ω–æ: {filename}")
                    downloaded += 1
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {filename}")
            else:
                print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {filename}")
            
            time.sleep(1)
    
    print(f"\nüéâ –ò–¢–û–ì–û:")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {downloaded}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {total_missing - downloaded}")
    print(f"üìÅ –í—Å–µ –∏–∫–æ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ –±–µ–∫–µ–Ω–¥–µ –≤: {API_DIR}")

if __name__ == "__main__":
    main()
