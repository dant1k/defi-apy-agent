#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫ —Å–µ—Ç–µ–π —Å DeFiLlama
"""

import requests
import os
import shutil
import time
import json
from typing import Dict, List, Any

API_STATIC_DIR = "api/static/icons"
FRONTEND_PUBLIC_DIR = "frontend/public/icons"

def get_defillama_chains():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π —Å DeFiLlama"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API DeFiLlama –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ç–µ–π
        url = "https://api.llama.fi/chains"
        response = requests.get(url, timeout=15)
        
        if response.status_code == 200:
            chains = response.json()
            return chains
        else:
            print(f"–û—à–∏–±–∫–∞ API DeFiLlama: {response.status_code}")
            return []
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ç–µ–π DeFiLlama: {e}")
        return []

def get_our_chains():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Å–µ—Ç–µ–π"""
    try:
        response = requests.get("http://localhost:8000/strategies?min_tvl=1000000&limit=500", timeout=10)
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            
            chains = set()
            for item in items:
                if item.get("chain"):
                    chains.add(item["chain"])
            
            return sorted(list(chains))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—à–∏—Ö —Å–µ—Ç–µ–π: {e}")
        return []

def find_defillama_matches(our_chains, defillama_chains):
    """–ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ–∂–¥—É –Ω–∞—à–∏–º–∏ —Å–µ—Ç—è–º–∏ –∏ DeFiLlama"""
    matches = []
    no_matches = []
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    dl_dict = {}
    for chain in defillama_chains:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
        dl_dict[chain["name"].lower()] = chain
        if chain.get("gecko_id"):
            dl_dict[chain["gecko_id"].lower()] = chain
        if chain.get("tokenSymbol"):
            dl_dict[chain["tokenSymbol"].lower()] = chain
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
    known_mappings = {
        "bsc": "bsc",
        "mainnet": "ethereum",
        "fuel-ignition": "fuel",
        "plume mainnet": "plume",
        "starknet": "starknet",
        "multiversx": "elrond",
        "optimism": "optimism",
        "arbitrum": "arbitrum",
        "polygon": "polygon",
        "avalanche": "avalanche",
        "solana": "solana",
        "ethereum": "ethereum",
        "base": "base",
        "fantom": "fantom",
        "celo": "celo",
        "cardano": "cardano",
        "polkadot": "polkadot",
        "cosmos": "cosmos",
        "osmosis": "osmosis",
        "sui": "sui",
        "aptos": "aptos",
        "ton": "ton",
        "stellar": "stellar",
        "neo": "neo",
        "flow": "flow",
        "filecoin": "filecoin",
        "cronos": "cronos",
        "linea": "linea",
        "berachain": "berachain",
        "core": "core",
        "fraxtal": "fraxtal",
        "etherlink": "etherlink",
        "hemi": "hemi",
        "hyperliquid": "hyperliquid",
        "plasma": "plasma",
        "sonic": "sonic",
        "flare": "flare",
        "sei": "sei"
    }
    
    for our_chain in our_chains:
        found = False
        match_info = None
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        our_chain_lower = our_chain.lower()
        if our_chain_lower in dl_dict:
            match_info = dl_dict[our_chain_lower]
            found = True
        elif our_chain_lower in known_mappings:
            mapping = known_mappings[our_chain_lower]
            if mapping in dl_dict:
                match_info = dl_dict[mapping]
                found = True
        
        if found:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º gecko_id –¥–ª—è –∏–∫–æ–Ω–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ name
            icon_id = match_info.get("gecko_id") or match_info["name"].lower().replace(" ", "-")
            matches.append({
                "our_name": our_chain,
                "dl_name": match_info["name"],
                "dl_gecko_id": match_info.get("gecko_id", ""),
                "dl_token_symbol": match_info.get("tokenSymbol", ""),
                "icon_url": f"https://icons.llama.fi/{icon_id}.png"
            })
        else:
            no_matches.append(our_chain)
    
    return matches, no_matches

def download_icon(url: str, save_path: str) -> bool:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫—É"""
    try:
        response = requests.get(url, stream=True, timeout=10)
        response.raise_for_status()
        
        with open(save_path, 'wb') as out_file:
            shutil.copyfileobj(response.raw, out_file)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
        return False

def normalize_chain_name(chain_name: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è —Å–µ—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–∞"""
    return chain_name.upper().replace(" ", "").replace("-", "").replace(".", "")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ —Å–µ—Ç–µ–π —Å DeFiLlama...")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(os.path.join(API_STATIC_DIR, "chains"), exist_ok=True)
    os.makedirs(os.path.join(FRONTEND_PUBLIC_DIR, "chains"), exist_ok=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à–∏ —Å–µ—Ç–∏
    print("üì° –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Å–µ—Ç–µ–π...")
    our_chains = get_our_chains()
    print(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞—à–∏—Ö —Å–µ—Ç–µ–π: {len(our_chains)}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–∏ DeFiLlama
    print("\nüì° –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π DeFiLlama...")
    defillama_chains = get_defillama_chains()
    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–µ—Ç–µ–π DeFiLlama: {len(defillama_chains)}")
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    print("\nüîç –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è...")
    matches, no_matches = find_defillama_matches(our_chains, defillama_chains)
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ô:")
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(matches)}")
    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(no_matches)}")
    print(f"üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {(len(matches) * 100) // len(our_chains)}%")
    
    if no_matches:
        print(f"\n‚ùå –ù–ï –ù–ê–ô–î–ï–ù–´ –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:")
        for chain in no_matches:
            print(f"  {chain}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏
    print(f"\nüîÑ –ó–ê–ì–†–£–ñ–ê–ï–ú –ò–ö–û–ù–ö–ò:")
    downloaded_count = 0
    failed_count = 0
    
    for match in matches:
        our_chain = match["our_name"]
        icon_url = match["icon_url"]
        
        print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {our_chain} -> {match['dl_name']}")
        print(f"  üîó URL: {icon_url}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
        filename = f"{normalize_chain_name(our_chain)}.png"
        api_path = os.path.join(API_STATIC_DIR, "chains", filename)
        frontend_path = os.path.join(FRONTEND_PUBLIC_DIR, "chains", filename)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫—É
        if download_icon(icon_url, api_path):
            print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {filename}")
            # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            shutil.copy(api_path, frontend_path)
            print(f"  üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥")
            downloaded_count += 1
        else:
            print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {our_chain}")
            failed_count += 1
        
        time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    print(f"\nüéâ –ò–¢–û–ì–ò –ó–ê–ì–†–£–ó–ö–ò:")
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {downloaded_count}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}")
    print(f"üìÅ –ò–∫–æ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {API_STATIC_DIR}/chains")
    print(f"üìÅ –ò–∫–æ–Ω–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤: {FRONTEND_PUBLIC_DIR}/chains")

if __name__ == "__main__":
    main()
