#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω–æ
"""

import os
import json
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ICONS_DIR = Path("frontend/public/icons")
BACKUP_DIR = Path("api/static/icons")

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (—Ç–æ–ø-50 –ø–æ market cap)
POPULAR_TOKENS = [
    "BTC", "ETH", "USDT", "BNB", "XRP", "SOL", "USDC", "STETH", "TRX", "DOGE",
    "ADA", "WSTETH", "WBETH", "WBTC", "LINK", "USDE", "WEETH", "XLM", "BCH", "HYPE",
    "SUI", "WETH", "AVAX", "LEO", "USDS", "HBAR", "LTC", "SHIB", "MNT", "XMR",
    "TON", "CRO", "DOT", "DAI", "UNI", "TAO", "ZEC", "OKB", "AAVE", "PEPE",
    "NEAR", "ETC", "APT", "ONDO", "WLD", "POL", "ICP", "ARB", "ALGO", "ATOM"
]

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ç–∏ (—Ç–æ–ø-30)
POPULAR_CHAINS = [
    "Ethereum", "Binance", "Polygon", "Avalanche", "Arbitrum", "Optimism", 
    "Base", "Solana", "Aptos", "Sui", "Linea", "Mantle", "Fantom", "Cronos",
    "Harmony", "Aurora", "Celo", "Kava", "Moonbeam", "Moonriver", "Astar",
    "Klaytn", "Flow", "Near", "Algorand", "Cosmos", "Polkadot", "Cardano",
    "Tron", "Bitcoin"
]

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã (—Ç–æ–ø-50)
POPULAR_PROTOCOLS = [
    "AAVE", "COMPOUND", "UNISWAP", "CURVE", "MAKER", "LIDO", "PENDLE", "SPARKLEND",
    "MORPHO", "EIGENLAYER", "BINANCECEX", "OKX", "BITFINEX", "BYBIT", "ROBINHOOD",
    "GEMINI", "GATE", "COINBASEBRIDGE", "BINANCEBITCOIN", "USDT0", "MORPHOV1",
    "BABYLONPROTOCOL", "HTX", "SKYLENDING", "ARBITRUMBRIDGE", "BITMEX", "BITGET",
    "DERIBIT", "MEXC", "KUCOIN", "JUSTLEND", "HYPERLIQUIDBRIDGE", "JUSTCRYPTOS",
    "BASEBRIDGE", "WBTC", "ETHENAUSDE", "ETHERFISTAKE", "BINANCESTAKEDETH", "PENDLE",
    "SPARKLEND", "MORPHO", "EIGENLAYER", "BINANCECEX", "OKX", "BITFINEX", "BYBIT",
    "ROBINHOOD", "GEMINI", "GATE", "COINBASEBRIDGE"
]

def move_to_backup(category: str, keep_list: list):
    """–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–∫–æ–Ω–∫–∏ –≤ backup"""
    category_dir = ICONS_DIR / category
    backup_category_dir = BACKUP_DIR / category
    
    if not category_dir.exists():
        return
    
    # –°–æ–∑–¥–∞–µ–º backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    backup_category_dir.mkdir(parents=True, exist_ok=True)
    
    moved_count = 0
    kept_count = 0
    
    for icon_file in category_dir.glob("*.png"):
        icon_name = icon_file.stem  # –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        
        if icon_name in keep_list:
            kept_count += 1
            print(f"‚úì Keeping: {category}/{icon_name}.png")
        else:
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ backup
            backup_path = backup_category_dir / icon_file.name
            icon_file.rename(backup_path)
            moved_count += 1
            print(f"‚Üí Moved to backup: {category}/{icon_name}.png")
    
    print(f"üìÅ {category}: kept {kept_count}, moved {moved_count} to backup")
    return kept_count, moved_count

def create_backend_endpoint():
    """–°–æ–∑–¥–∞—Ç—å endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ –±–µ–∫"""
    endpoint_code = '''
@app.get("/icons/{category}/{filename}")
async def get_icon(category: str, filename: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–∑ backup –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –∏–∑ CoinGecko"""
    icon_path = f"api/static/icons/{category}/{filename}"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ - –æ—Ç–¥–∞–µ–º
    if os.path.exists(icon_path):
        return FileResponse(icon_path, media_type="image/png")
    
    # –ò–Ω–∞—á–µ —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑ CoinGecko (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É)
    return {"error": "Icon not found"}
'''
    
    with open("api/icon_endpoint.py", "w") as f:
        f.write(endpoint_code)
    
    print("üìÑ Created api/icon_endpoint.py")

def main():
    print("üöÄ Optimizing icons - keeping only popular ones locally...")
    
    # –°–æ–∑–¥–∞–µ–º backup –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    BACKUP_DIR.mkdir(parents=True, exist_ok=True)
    
    total_kept = 0
    total_moved = 0
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    print("\nüì± Optimizing tokens...")
    kept, moved = move_to_backup("tokens", POPULAR_TOKENS)
    total_kept += kept
    total_moved += moved
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–∏
    print("\nüåê Optimizing chains...")
    kept, moved = move_to_backup("chains", POPULAR_CHAINS)
    total_kept += kept
    total_moved += moved
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
    print("\nüèõÔ∏è Optimizing protocols...")
    kept, moved = move_to_backup("protocols", POPULAR_PROTOCOLS)
    total_kept += kept
    total_moved += moved
    
    # –°–æ–∑–¥–∞–µ–º endpoint –¥–ª—è –±–µ–∫–µ–Ω–¥–∞
    create_backend_endpoint()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\n‚úÖ Optimization complete!")
    print(f"üìä Kept {total_kept} popular icons locally")
    print(f"üì¶ Moved {total_moved} icons to backup")
    print(f"üíæ Backup location: {BACKUP_DIR}")
    print(f"üåê Backend endpoint: /icons/{{category}}/{{filename}}")

if __name__ == "__main__":
    main()

