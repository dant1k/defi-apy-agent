#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–æ–∫ —Å–µ—Ç–µ–π –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
"""

import requests
import os
import hashlib
from typing import Dict, List

def get_file_hash(filepath: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()
    except:
        return ""

def check_chain_icons():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∫–æ–Ω–∫–∏ —Å–µ—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∫–æ–Ω–∫–∏ —Å–µ—Ç–µ–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Å–µ—Ç–µ–π
    try:
        response = requests.get("http://localhost:8000/strategies?min_tvl=1000000&limit=500", timeout=10)
        if response.status_code == 200:
            data = response.json()
            items = data.get("items", [])
            
            chains = sorted(set(item["chain"] for item in items if item.get("chain")))
        else:
            print("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            return
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Ç–µ–π: {len(chains)}")
    print("")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∏–∫–æ–Ω–∫—É
    for chain in chains:
        filename = chain.upper().replace(" ", "").replace("-", "").replace(".", "") + ".png"
        api_path = f"api/static/icons/chains/{filename}"
        frontend_path = f"frontend/public/icons/chains/{filename}"
        
        if os.path.exists(api_path):
            file_size = os.path.getsize(api_path)
            file_hash = get_file_hash(api_path)
            print(f"‚úÖ {chain} -> {filename} ({file_size} bytes, hash: {file_hash[:8]}...)")
        else:
            print(f"‚ùå {chain} -> {filename} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")

if __name__ == "__main__":
    check_chain_icons()
