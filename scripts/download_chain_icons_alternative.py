#!/usr/bin/env python3
"""
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∫–æ–Ω–∫–∏ —Å–µ—Ç–µ–π –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
"""

import os
import requests
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
FRONTEND_ICONS_DIR = Path("frontend/public/icons/chains")
API_ICONS_DIR = Path("api/static/icons/chains")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∫–æ–Ω–æ–∫
CHAIN_ICON_SOURCES = {
    "ARBITRUM": "https://cryptologos.cc/logos/arbitrum-arb-logo.png",
    "BSC": "https://cryptologos.cc/logos/bnb-bnb-logo.png", 
    "CORE": "https://cryptologos.cc/logos/core-coredao-logo.png",
    "FLARE": "https://cryptologos.cc/logos/flare-flr-logo.png",
    "FLOW": "https://cryptologos.cc/logos/flow-flow-logo.png",
    "FRAXTAL": "https://cryptologos.cc/logos/frax-frax-logo.png",
    "FUEL": "https://cryptologos.cc/logos/fuel-fuel-logo.png",
    "HEMI": "https://cryptologos.cc/logos/hemi-hemi-logo.png",
    "HYPERLIQUID": "https://cryptologos.cc/logos/hyperliquid-hyperliquid-logo.png",
    "MAINNET": "https://cryptologos.cc/logos/ethereum-eth-logo.png",
    "MULTIVERSX": "https://cryptologos.cc/logos/multiversx-egld-logo.png",
    "NEO": "https://cryptologos.cc/logos/neo-neo-logo.png",
    "OSMOSIS": "https://cryptologos.cc/logos/osmosis-osmo-logo.png",
    "STARKNET": "https://cryptologos.cc/logos/starknet-stark-logo.png",
    "STELLAR": "https://cryptologos.cc/logos/stellar-xlm-logo.png",
    "TON": "https://cryptologos.cc/logos/toncoin-ton-logo.png"
}

def download_image(url: str, path: Path) -> bool:
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL."""
    try:
        if not url or not url.startswith('http'):
            return False

        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            with open(path, 'wb') as f:
                f.write(response.content)
            print(f"‚úì Downloaded: {path.name}")
            return True
    except Exception as e:
        print(f"‚úó Failed {path.name}: {e}")
    return False

def download_alternative_chain_icons():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∫–æ–Ω–∫–∏ –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    print("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫–∏ –∏–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
    
    downloaded = 0
    failed = 0
    
    for chain_name, icon_url in CHAIN_ICON_SOURCES.items():
        icon_file = f"{chain_name}.png"
        
        frontend_path = FRONTEND_ICONS_DIR / icon_file
        api_path = API_ICONS_DIR / icon_file
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        if frontend_path.exists() and api_path.exists():
            print(f"‚úì {chain_name} - —É–∂–µ –µ—Å—Ç—å")
            continue
        
        print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º {chain_name}...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤ frontend
        if not frontend_path.exists():
            if download_image(icon_url, frontend_path):
                downloaded += 1
            else:
                failed += 1
                continue
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤ API
        if not api_path.exists():
            try:
                with open(frontend_path, 'rb') as src, open(api_path, 'wb') as dst:
                    dst.write(src.read())
                print(f"‚úì Copied to API: {icon_file}")
            except Exception as e:
                print(f"‚úó Failed to copy to API: {e}")
                failed += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {downloaded}")
    print(f"‚úó –ù–µ —É–¥–∞–ª–æ—Å—å: {failed}")

if __name__ == "__main__":
    download_alternative_chain_icons()

