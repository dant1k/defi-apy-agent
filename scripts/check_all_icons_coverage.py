#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–π, –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤.
"""

import os
import requests
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
FRONTEND_ICONS_DIR = Path("frontend/public/icons")
API_ICONS_DIR = Path("api/static/icons")

def normalize_name(name: str, category: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∫–æ–Ω–∫–∏."""
    if category == "chains":
        return name.upper().replace(" ", "").replace("-", "").replace("_", "").replace(".", "")
    elif category == "protocols":
        return name.upper().replace(" ", "").replace("-", "").replace("_", "")
    else:  # tokens
        return name.upper()

def check_icon_exists(name: str, category: str) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö."""
    normalized = normalize_name(name, category)
    icon_file = f"{normalized}.png"
    
    frontend_path = FRONTEND_ICONS_DIR / category / icon_file
    api_path = API_ICONS_DIR / category / icon_file
    
    return {
        "name": name,
        "normalized": normalized,
        "frontend_exists": frontend_path.exists(),
        "api_exists": api_path.exists(),
        "frontend_path": str(frontend_path),
        "api_path": str(api_path)
    }

def test_api_icon(category: str, normalized: str) -> bool:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∫–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ API."""
    try:
        response = requests.get(f"http://localhost:8000/icons/{category}/{normalized}.png", timeout=5)
        return response.status_code == 200
    except:
        return False

def check_coverage():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
    
    # –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
    with open("/tmp/chains.txt", "r") as f:
        chains = [line.strip() for line in f if line.strip()]
    
    with open("/tmp/protocols.txt", "r") as f:
        protocols = [line.strip() for line in f if line.strip()]
    
    with open("/tmp/tokens.txt", "r") as f:
        tokens = [line.strip() for line in f if line.strip()]
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
    print(f"üìä –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(chains)} —Å–µ—Ç–µ–π + {len(protocols)} –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ + {len(tokens)} —Ç–æ–∫–µ–Ω–æ–≤ = {len(chains) + len(protocols) + len(tokens)}")
    print()
    
    results = {
        "chains": {"total": len(chains), "frontend": 0, "api": 0, "missing": []},
        "protocols": {"total": len(protocols), "frontend": 0, "api": 0, "missing": []},
        "tokens": {"total": len(tokens), "frontend": 0, "api": 0, "missing": []}
    }
    
    for category, items in [("chains", chains), ("protocols", protocols), ("tokens", tokens)]:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {category} ({len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)...")
        
        for item in items:
            result = check_icon_exists(item, category)
            
            if result["frontend_exists"]:
                results[category]["frontend"] += 1
            if result["api_exists"]:
                results[category]["api"] += 1
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ, –Ω–∏ –≤ API
            if not result["frontend_exists"] and not result["api_exists"]:
                results[category]["missing"].append(result)
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤ API, –Ω–æ –Ω–µ—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ (fallback —Ä–∞–±–æ—Ç–∞–µ—Ç)
            elif not result["frontend_exists"] and result["api_exists"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ API
                if test_api_icon(category, result["normalized"]):
                    pass  # API —Ä–∞–±–æ—Ç–∞–µ—Ç, fallback —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
                else:
                    results[category]["missing"].append(result)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ö–†–´–¢–ò–Ø –ò–ö–û–ù–û–ö:")
    print("=" * 50)
    
    total_missing = 0
    for category, data in results.items():
        print(f"\n{category.upper()}:")
        print(f"  –í—Å–µ–≥–æ: {data['total']}")
        print(f"  –ù–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ: {data['frontend']} ({data['frontend']/data['total']*100:.1f}%)")
        print(f"  –í API: {data['api']} ({data['api']/data['total']*100:.1f}%)")
        print(f"  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {len(data['missing'])} ({len(data['missing'])/data['total']*100:.1f}%)")
        
        if data['missing']:
            print(f"  ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ {category}:")
            for item in data['missing'][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"    - {item['name']} -> {item['normalized']}.png")
            if len(data['missing']) > 10:
                print(f"    ... –∏ –µ—â–µ {len(data['missing']) - 10}")
        
        total_missing += len(data['missing'])
    
    print(f"\nüéØ –ò–¢–û–ì–û:")
    total_items = sum(data['total'] for data in results.values())
    print(f"  –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_items}")
    print(f"  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–∫–æ–Ω–æ–∫: {total_missing}")
    print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ: {(total_items - total_missing)/total_items*100:.1f}%")
    
    if total_missing == 0:
        print("\nüéâ –û–¢–õ–ò–ß–ù–û! –í—Å–µ –∏–∫–æ–Ω–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ!")
    else:
        print(f"\n‚ö†Ô∏è  –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å {total_missing} –∏–∫–æ–Ω–æ–∫")
    
    return results

if __name__ == "__main__":
    check_coverage()
