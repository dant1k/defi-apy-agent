#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–æ–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏ —Å–µ—Ç–µ–π —á–µ—Ä–µ–∑ DeFiLlama API
"""

import os
import requests
import json
import time
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
DEFILLAMA_API = "https://api.llama.fi"
ICONS_DIR = Path("frontend/public/icons")
PROTOCOLS_FILE = "frontend/public/data/defillama_protocols.json"
CHAINS_FILE = "frontend/public/data/defillama_chains.json"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
ICONS_DIR.mkdir(parents=True, exist_ok=True)
ICONS_DIR.joinpath("protocols").mkdir(exist_ok=True)
ICONS_DIR.joinpath("chains").mkdir(exist_ok=True)
ICONS_DIR.parent.joinpath("data").mkdir(exist_ok=True)

def download_image(url: str, path: Path) -> bool:
    """–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
    try:
        if not url or not url.startswith('http'):
            return False
            
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            with open(path, 'wb') as f:
                f.write(response.content)
            print(f"‚úì Downloaded: {path.name}")
            return True
    except Exception as e:
        print(f"‚úó Failed {path.name}: {e}")
    return False

def get_defillama_protocols():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ –∏–∑ DeFiLlama"""
    try:
        response = requests.get(f"{DEFILLAMA_API}/protocols")
        
        if response.status_code == 200:
            protocols = response.json()
            protocol_data = []
            
            for protocol in protocols:
                name = protocol.get("name", "")
                slug = protocol.get("slug", "")
                logo = protocol.get("logo", "")
                
                if name and logo:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
                    file_name = name.upper().replace(" ", "").replace("-", "").replace("_", "")
                    file_name = "".join(c for c in file_name if c.isalnum())
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
                    icon_path = ICONS_DIR / "protocols" / f"{file_name}.png"
                    if download_image(logo, icon_path):
                        protocol_data.append({
                            "name": name,
                            "slug": slug,
                            "icon": f"/icons/protocols/{file_name}.png",
                            "logo_url": logo
                        })
                
                time.sleep(0.1)  # Rate limiting
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(PROTOCOLS_FILE, 'w') as f:
                json.dump(protocol_data, f, indent=2)
            
            print(f"‚úì Downloaded {len(protocol_data)} protocol icons")
            return protocol_data
            
    except Exception as e:
        print(f"‚úó Error getting protocols: {e}")
    
    return []

def get_defillama_chains():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π –∏–∑ DeFiLlama"""
    try:
        response = requests.get(f"{DEFILLAMA_API}/chains")
        
        if response.status_code == 200:
            chains = response.json()
            chain_data = []
            
            for chain in chains:
                name = chain.get("name", "")
                tokenSymbol = chain.get("tokenSymbol", "")
                logo = chain.get("logo", "")
                
                if name and logo:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
                    file_name = name.replace(" ", "").replace("-", "").replace("_", "")
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É
                    icon_path = ICONS_DIR / "chains" / f"{file_name}.png"
                    if download_image(logo, icon_path):
                        chain_data.append({
                            "name": name,
                            "symbol": tokenSymbol,
                            "icon": f"/icons/chains/{file_name}.png",
                            "logo_url": logo
                        })
                
                time.sleep(0.1)  # Rate limiting
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(CHAINS_FILE, 'w') as f:
                json.dump(chain_data, f, indent=2)
            
            print(f"‚úì Downloaded {len(chain_data)} chain icons")
            return chain_data
            
    except Exception as e:
        print(f"‚úó Error getting chains: {e}")
    
    return []

def main():
    print("üöÄ Starting icon download from DeFiLlama...")
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
    print("\nüèõÔ∏è Downloading protocol icons...")
    protocols = get_defillama_protocols()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Å–µ—Ç–∏
    print("\nüåê Downloading chain icons...")
    chains = get_defillama_chains()
    
    print(f"\n‚úÖ Complete! Downloaded {len(protocols)} protocols and {len(chains)} chains")
    print(f"üìÅ Icons saved to: {ICONS_DIR}")
    print(f"üìÑ Data saved to: {PROTOCOLS_FILE}, {CHAINS_FILE}")

if __name__ == "__main__":
    main()
